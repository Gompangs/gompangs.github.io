<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Prometheus 공부 및 Java client 연동</title>
      <link href="/2018/12/14/prometheus/"/>
      <url>/2018/12/14/prometheus/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>Prometheus 는 오픈소스 모니터링 솔루션이다. (<a href="https://prometheus.io/" target="_blank" rel="noopener">https://prometheus.io/</a>)</p><p>크게 Prometheus 서버와, 메트릭 정보를 export할 export node로 구성이 되어 있다</p><p><img src="/images/prometheus_architecture.png" alt="img"></p><p>구조가 좀 일반적인 모니터링 시스템과는 다르다는걸 느낄수가 있는데, 원래는 대부분의 솔루션이 메트릭을 수집할 때 메트릭이 발생한 서버에서 중앙 서버로 데이터를 전송해주는 구조로(push) 되어 있지만, 프로메테우스 같은 경우는 신기하게도 중앙서버(prometheus server)에서 메트릭을 polling 해서 가져가도록 구성이 되어 있다.</p><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><p>이 솔루션을 쓰게 되면 얻을 수 있는 장점은, 아무래도 pull 방식의 구조를 채택함으로써 모든 메트릭에 대한 데이터를 중앙 서버로 보내지 않아도 된다는 점이다. 대부분의 모니터링 시스템 구조는 push방식으로 메트릭이 발생하면 해당 메트릭을 서버로 보내는 방식을 채택하고 있는데, 만약 부하가 높은 상황에서 그런 메트릭들을 수집하기 위해 전송하는 부분이 생긴다면? 부하와 더불어서 실제 어플리케이션에 문제를 유발할 수 있는 fail point가 생기는 것이다</p><p>Prometheus의 특성 상, 모든 데이터를 수집하지 않고 일정 주기(default 15s)로 발생하는 메트릭을 수집하여 추이나 모니터링을 <strong>어플리케이션에 무리 없이</strong> 하기 때문에 이러한 부분에서 매력적인 솔루션이라고 말할 수 있다.</p><p>또한 현재 Prometheus를 사용하고 있는 Vendor와 open-source들이 상당히 많다. 구조가 복잡하지 않고 간단하기 때문에 특정 솔루션에 대한 export를 하는 것이 어렵지 않다. 특히 Kubernetes와 Docker환경에서의 서비스의 메트릭을 수집하고 분석하는 대에 집중적으로 많이 사용이 되고 있다.</p><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><p>Scale-out이 안된다(정확히 말하자면 억지로 되지만, 이것은 사실상 clustering이 아니라고 본다) 문서에 적혀있기를 Prometheus를 여러대에 구성해서 사용하려면 Prometheus에 Prometheus를 연결해서.. Hierarchy 구조를 만들어서 사용을 하면 된다 라고 하는데! 세상에 너무 지저분한 구조인 것 같다.</p><p>대부분 Clustering이라 함은.. Host를 여러대 두고 gossip을 통해 서로를 discovery 하고, 데이터를 sharding 및 replication을 해서 특정 노드가 죽어도 H/A(High Availability)를 보장해주는게 되어야 하는데 Prometheus 같은 경우는 그런 고가용성을 지원한다는 개념보다는 간단한 구조로 손쉽게 사용을 할 수 있다에 목적이 있는 것 같다.</p><p>또한, 위의 장점이 또 단점이 될 수 있는 부분인데 모든 메트릭을 전송하지 않기 때문에 사실상 “추이”를 보는데는 좋지만 APM(Application Performance Monitoring)과 같이 발생한 모든 로그를 추적하고 문제가 발생했을 때 이를 검색해서 어떤 일이 있었는지의 원인을 밝히고자 했을때는 적합하지 않은 솔루션이다.</p><h3 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h3><p>따라서 위의 장점만 가지고도 서비스 모니터링에 부합하는지를 잘 체크를 해서 도입을 해야할 필요성이 있다. 장/단점이 확실한 솔루션이다보니 push방식의 비슷한 솔루션들에 비해서는 모호한 부분은 없는 것 같다고 생각이 된다.</p><hr><h2 id="서버-내부-모듈"><a href="#서버-내부-모듈" class="headerlink" title="서버 내부 모듈"></a>서버 내부 모듈</h2><h3 id="Retrival"><a href="#Retrival" class="headerlink" title="Retrival"></a>Retrival</h3><p>메트릭을 수집할 대상 서버에 접근해서(HTTP) 메트릭을 가져오거나, 아니면 Pushgateway를 통해서 접근할 수 없는 곳에 있는 데이터(inner server, firewall 내부의 metric 등)를 가져오는 등의 역할을 하게 된다</p><p>Pushgateway는 쉽게말해 Proxy Forwarding을 해서 접근할 수 없는 곳에 데이터가 존재하는 경우 이때 사용할 수 있는 대안이라고 보면 된다. 사내망에 데이터가 있어서 외부에서 scrape를 하고싶어도 접근이 안되는 경우 말이다. 아무래도 메트릭 발생 서버 -&gt; 메트릭 집계 서버 가 아닌 메트릭 집계서버가 메트릭 발생 서버에 직접 접근을 해서 데이터를 가져가기 때문에 존재하는 개념인 듯 하다.</p><h3 id="TSDB-Time-series-Database"><a href="#TSDB-Time-series-Database" class="headerlink" title="TSDB(Time-series Database)"></a>TSDB(Time-series Database)</h3><p>이렇게 가져온 데이터를 저장하고, 시간의 흐름에 따라 조회를 할 수 있어야 하므로 시-계열 데이터(time-series) 를 저장할 수 있는 저장소가 prometheus 내부에 구현이 되어 있다.</p><p>데이터를 저장하는 방법은 Local Storage, Remote Storage를 이용하는 방법 두 가지가 존재한다. 대부분 Local Storage를 쓰는걸로 default로 사용하겠지만 필요에 따라서 원격지에 있는 서버에 데이터를 저장해서 사용을 한다고 한다</p><p><img src="/images/prometheus-storage-9-638.jpg" alt="img"></p><p>내부 저장소는 Google에서 만든 <a href="https://github.com/google/leveldb" target="_blank" rel="noopener">Level DB</a>를 사용하는걸로 보인다 light-weight의 Key-value 저장소이며 전반적으로 뛰어난 성능을 보이기에 여러군데서 차용해서 쓰는것 같다.(프로메테우스도)</p><p><img src="/images/prometheus-storage-4-638.jpg" alt="img"></p><p>프로메테우스의 메트릭은 위와 같이 수집이 되는데 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">메트릭명&#123;필드1=값, 필드2=값&#125; 샘플링데이터</span><br></pre></td></tr></table></figure><p>실제로 timestamp값은 프로메테우스 서버 내부에서 저장될 때 같이 넣게 되고 export하는 부분에서는 메트릭명-샘플링데이터와 같은 형태로 보여지게 된다.</p><p><img src="https://3.bp.blogspot.com/-eduU9hfXlCY/WhJT2x6oFqI/AAAAAAAAff8/sUiEeCflN-E9oY5Vn98ypNgx-fYlxv4IgCLcBGAs/s1600/Micrometer-Boot2.png" alt="img"></p><p>이게 Spring boot에 Prometheus export 라이브러리를 붙인 모습인데, 보다시피 많은수의 메트릭이 발생을 하게 되고, 이를 text/html 방식으로 특정 url(대부분 /metrics)로 export를 해두게 되면, prometheus 서버가 이를 긁어가서 데이터를 저장하는 구조이다.</p><h3 id="HTTP-Server"><a href="#HTTP-Server" class="headerlink" title="HTTP Server"></a>HTTP Server</h3><p>prometheus에 저장된 데이터를 조회하기 위해서는 내부적으로 HTTP 서버가 필요하다. 따라서 prometheus는 데이터를 가져가기 위한 프로토콜로 HTTP REST API를 제공하고, 직접 API를 통해 데이터를 가져가던지, Web UI 대시보드에서 데이터를 조회한다던지, Grafana를 통해 더욱 자세하고 깔끔한 데이터 시각화를 할 수 있다</p><h3 id="Web-UI"><a href="#Web-UI" class="headerlink" title="Web UI"></a>Web UI</h3><p>원래는 시각화를 위한 툴을 붙여서 보는게 더 좋지만, 그렇게 하지 않아도 기본적으로 제공하는 Dashboard가 있다.</p><p><img src="https://www.callicoder.com/assets/images/post/large/spring-boot-actuator-metrics-dashboard-prometheus-graph.jpg" alt="img"></p><p>위와 같이 Bootstrap으로 작성된듯한 투박한 대시보드가 제공이 되고, 간단하게 보고싶은 메트릭에 대한 그래프를 볼 수 있는 정도이다. 한 대시보드에 여러개의 메트릭의 추이를 보고싶다던지, 다른 그래프 형식으로 보고싶다던지 하는 것들은 지원이 되지 않으며 이는 Grafana를 통해 시각화가 가능하니 그쪽을 보도록 하자.</p><h3 id="Alert-Manager"><a href="#Alert-Manager" class="headerlink" title="Alert Manager"></a>Alert Manager</h3><p>모니터링 시스템이니, 문제가 발생하면 이를 알람으로 보내주는 역할도 있어야한다. Alertmanager는 Prometheus에서 문제가 발생했다고 생각되는 시점에 slack, hipchat 등을 통해 알람을 보내준다.</p><p>알람을 거는 기준은 Rule을 작성해서 load시키는 방식으로 동작하는데</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">expr: job:request_latency_seconds:mean5m&#123;job=&quot;myjob&quot;&#125; &gt; 0.5</span><br></pre></td></tr></table></figure><p>와 같이 expression을 작성하는 것으로 알람을 전송할 수 있다. 특정 메트릭의 값이 어느정도 선(threshold)을 넘는다거나, 낮아진다거나 하는 메트릭을 보고 판단을 할 수 있다.</p><p>다만, 이 또한 Grafana를 사용하게 된다면 Grafana에서도 동일하게 알람매니저를 제공을 하고 있는데, 아무래도 Grafana쪽이 사용하기 더 쉽고 직관적이기 때문에 이걸 직접 사용할까는 싶지만, 그래도 expression을 이용해서 더 복잡한 조건을 걸어서 알람을 노티해주는 방식이 있다는 것에는 존재필요성을 당연히 느낀다.</p><h2 id="Java-Client-연동"><a href="#Java-Client-연동" class="headerlink" title="Java Client 연동"></a>Java Client 연동</h2>]]></content>
      
      
      
        <tags>
            
            <tag> prometheus, java, client, 프로메테우스 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Javascript Promise에 관하여</title>
      <link href="/2018/11/18/Javascript/"/>
      <url>/2018/11/18/Javascript/</url>
      
        <content type="html"><![CDATA[<h2 id="개요"><a href="#개요" class="headerlink" title="개요"></a>개요</h2><p>Javascript는 널리 알려진 것 처럼 비동기 함수 위주의 동작을 잘 구현한 언어이다.</p><p>특히 NodeJS에 와서는 그 비동기 함수로 인한 장점을 많이 누릴 수 있게 된 것 같은데 아무래도 평소에 개발하는건 대부분 Java로 하기 때문에 Javascript를 개인적으로 공부해보고 무슨 장점이 있는지에 대해 알아보려고 한다.</p><p>일단 Promise가 무엇인지부터 살펴보도록 하자</p><blockquote><p>The <strong>Promise</strong> object represents the eventual completion (or failure) of an asynchronous operation, and its resulting value.</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise</a></p></blockquote><p>설명에 따르면 Promise는 비동기 함수의 동작이나 return value의 실패/성공을 받아서 궁극적인 완성을 시키기 위함 이라고 한다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="comment">/* executor */</span> <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; ... &#125; );</span><br></pre></td></tr></table></figure><p>Promise는 위와 같이 resolve와 reject라는 parameter를 가지고 있다.</p><p><img src="https://gompangs.github.io/images/promise-resolve-reject.png" alt=""></p><h2 id="Promise를-사용-안할-때"><a href="#Promise를-사용-안할-때" class="headerlink" title="Promise를 사용 안할 때"></a>Promise를 사용 안할 때</h2><h2 id="Promise를-사용할-때"><a href="#Promise를-사용할-때" class="headerlink" title="Promise를 사용할 때"></a>Promise를 사용할 때</h2>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>markdown</title>
      <link href="/2018/11/18/markdown/"/>
      <url>/2018/11/18/markdown/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>안녕하세요, 이게 Typora로 작성하는 중인데요</p><ul><li>첫번째<ul><li>두번째</li></ul></li></ul><ol><li>이것도<ol><li>저것도<ol><li>이것도</li></ol></li></ol></li></ol><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="안녕하세요"><a href="#안녕하세요" class="headerlink" title="안녕하세요"></a>안녕하세요</h2><blockquote><p>무언가를 말하고싶을땐 이렇게 말한다</p><p>Blockquote 구문</p></blockquote><p><em>이렇게 하면 강조</em></p><p><strong>이렇게하면 강조2</strong></p><p><em>이렇게하면 강조</em></p><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><p><img src="https://taazaa.com/wp-content/uploads/2017/12/microservice.png" alt="img"></p><p><img src="https://google.com/favicon.ico" alt=""></p><h2 id="두번째-단락"><a href="#두번째-단락" class="headerlink" title="두번째 단락"></a>두번째 단락</h2><p>여기가 두번째 단락</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">some_function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    data.stream(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(stream);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="세번째-단락"><a href="#세번째-단락" class="headerlink" title="세번째 단락"></a>세번째 단락</h2><p>여기가 세번째 단락입니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">static void SomeMethod(Point some, int some2)&#123;</span><br><span class="line">    some.GetX();</span><br><span class="line">    some.GetY();</span><br><span class="line">    int _some = some2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">​<span class="code">```java</span></span><br><span class="line"><span class="code">public static void main()&#123;</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code">​</span></span><br></pre></td></tr></table></figure><p><code>`</code></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>disqus</title>
      <link href="/2018/11/02/disqus/"/>
      <url>/2018/11/02/disqus/</url>
      
        <content type="html"><![CDATA[<p>아 제발 disqus좀 되게 해주세요</p><p>아래에 있는 disqus 나오게 해주세요</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#editor'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    input: <span class="string">'# hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    compiledMarkdown: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> marked(<span class="keyword">this</span>.input, &#123; <span class="attr">sanitize</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    update: _.debounce(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.input = e.target.value</span><br><span class="line">    &#125;, <span class="number">300</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> disqus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>java test</title>
      <link href="/2018/11/02/java-test/"/>
      <url>/2018/11/02/java-test/</url>
      
        <content type="html"><![CDATA[<p>JAVA TEST</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title></title>
      <link href="/2018/11/02/Untitled/"/>
      <url>/2018/11/02/Untitled/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>first-post</title>
      <link href="/2018/11/02/first-post/"/>
      <url>/2018/11/02/first-post/</url>
      
        <content type="html"><![CDATA[<p>첫번째 블로그 포스팅 테스트입니다.<br>Hello world, this is test post for Hexo blog.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello world"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게하면 어떻게보일지 잘 모르겠네요</p><p>I don’t know what you see whatever I did anything.</p><p>수정중이면 바로 반영이 되나?</p>]]></content>
      
      
      <categories>
          
          <category> test </category>
          
      </categories>
      
      
        <tags>
            
            <tag> test </tag>
            
            <tag> post </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/11/02/hello-world/"/>
      <url>/2018/11/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
</search>
